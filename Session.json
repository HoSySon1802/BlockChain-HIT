pragma solidity ^0.4.17;

// interface Main {
//     function addSession(address session) public;
// }
import "./Main.sol";

contract Session {

    enum State {START,REGISTER,VOTE,CLOSING,CLOSED}

    address public mainContract;


    Main MainContract;
    string productName;
    string productDescription;
    uint public proposedPrice;
    address[] participantJoin;
    mapping (address => uint ) participantGivenPrice;
    State state;
 

    function Session (address _mainContract,string  _productName, string  _productDescription) {

        mainContract = _mainContract;
        MainContract = Main(_mainContract);
        MainContract.addSession(address(this));
        productName = _productName;
        productDescription = _productDescription;
        state = State.START;
    }

    function addParticipant(address _address) external {
        participantJoin.push(_address);
    }

    function changeStateToRegister() external {
        state = State.REGISTER;
    }

    function changeStateVote() external {
        state = State.VOTE;
    }

    function changeStateClosing() external {
        state = State.CLOSING;
    }


    function getState() external returns(uint) {
        return uint(state);
    }


    function voting(address _personVote,uint _numberVote) public {
        participantGivenPrice[_personVote] = _numberVote;
    }

    function personJoin(address _person ) external returns (bool) {

        bool check = false;

        for(uint i = 0; i < participantJoin.length; i++) {

            if( participantJoin[i] == _person) {
                check = true;
                break;
            }
        }
        return check;
    }

    function Caculate() public {

        uint _sumOfProposed = 0;
        uint _sumOfDeviation = 0;

        // caculate Proposed.

        for(uint i = 0; i < participantJoin.length ; i++) {
            address _person =  participantJoin[i];
            _sumOfProposed += participantGivenPrice[_person]*(100*1000 - MainContract.getDeviation(_person));
            _sumOfDeviation += MainContract.getDeviation(_person);
        }

        _sumOfProposed = _sumOfProposed*1000;
        proposedPrice = _sumOfProposed/( 1000*100*participantJoin.length - _sumOfDeviation);

        // caculate 
        for( i = 0; i < participantJoin.length ; i++) {
            _person =  participantJoin[i];
            uint _deviationPresent = MainContract.getDeviation(_person);
            //uint _numberPerson
            uint _dnew = (proposedPrice - _deviationPresent) *100*10000;
            _dnew = _dnew/ _deviationPresent ;
            uint numberSessionForPerson = MainContract.getNumberSession(_person);
            uint _d = (_deviationPresent * numberSessionForPerson + _dnew);
            numberSessionForPerson +=1;

            uint d = _d / numberSessionForPerson ;
            MainContract.setDeviation(_person, d);
        }

        // change state
        state = State.CLOSED;
    }
}
